from numpy import dtype
# from qrtDEM import readDEM, rotateDEM
from common import *
import numpy as np

# antenna = VCP12,
# height = ray_height,
# distancies = earth_dist.astype(np.float32),
# azimuths = azims,
#
# azimuths_1D_ord = azims_1d,
# height_1D_ord = [r.ravel()[sorter_azDst] for r in ray_height],
# order1D_azdst = sorter_azDst.astype(np.int32),
# invert1D_azdst = np.argsort(sorter_azDst).astype(np.int32),
# unique_azims = ua,
# azims_1D_range = ur



# only NE - the DEM gets rotated
def beamTracker (quarter, easting, northing, tower_elevation, antenna=0):
    radar_model = np.load(const.RADAR_NPZ, allow_pickle=True)
    ix_el = np.where(radar_model['antenna'] == antenna)[0][0]

    order_1d  = radar_model['order1D_azdst']
    invert_1d = radar_model['invert1D_azdst']
    azims_1d = radar_model['azimuths_1D_ord']
    beam_height_1d = tower_elevation + radar_model['height_1D_ord'][ix_el]
    ix_1d = np.arange(0, order_1d.shape[0], 1, dtype=np.int32)
    unq_az  = radar_model['unique_azims']
    rng_az = radar_model['azims_1D_range']

    qshp = radar_model['height'][0].shape
    (QRT_H, QRT_W) = qshp

    data, ix, iy, gt = readDEM(easting, northing, quarter, QRT_H, QRT_W)
    data = rotateDEM(quarter, data)
    data_1d = data.ravel()[order_1d]

    blocked_1d = np.zeros(data_1d.shape, dtype=np.uint8)
    inter = beam_height_1d < data_1d
    if np.nansum(inter) > 0:
        unq_az_inter, unq_ix_inter =  np.unique(azims_1d[inter], return_index=1)
        firts_ix = ix_1d[inter][unq_ix_inter]
        # np.searchsorted(unq_az, unq_az_inter)
        last_ix = rng_az[np.searchsorted(unq_az, unq_az_inter)][:, 1]
        blocked_1d[
            np.r_[
                tuple(slice(start, end) for start, end in zip(firts_ix, last_ix))
            ]
        ] = 1
        # if np.nansum(unq_az_inter):
        #     _range =[(0,0)]*len(unq_az_inter)
        #     for i in range(0, len(unq_az_inter)):
        #         u = np.int32(unq_az_inter[i])
        #         r_ix = np.where(unq_az == u)[0][0]
        #         print (r_ix - test[i])
        #         b, e  = firts_ix[i], rng_az[r_ix][1]
        #         _range[i] = (b, e)
    # blocked_1d[
    #     np.r_[tuple(slice(start, end) for start, end in _range)]
    # ] = 1

    # blocked_1d[ beam_height_1d > data_1d + MAX_RAY_ALT] = 1
    ret = rotateDEM(
        quarter,
        np.logical_not(blocked_1d[invert_1d].reshape(qshp))
        )
    return ret


if __name__ == '__main__':
    q = 'se'
    ae = const.VCP12[0]
    [easting, northing], tower_ft = (-724341.3193009677, 1895659.98141354), 5611.0
    tower = ft2m(tower_ft)
    blocked = beamTracker(q, easting=easting, northing=northing, tower_elevation=tower, antenna=ae)
    plotData(blocked)
